{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"ac775e8d-2fea-59a7-ad82-25565278c856","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar theme = themes.notes;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(CssBaseline, {\n    mdxType: \"CssBaseline\"\n  }), mdx(\"h1\", null, \"Mui Styling\"), mdx(\"h5\", null, \"UI Meetup 18th Oct 2021\"), mdx(\"h6\", null, \"By Phani Rahul Sivalenka\"), mdx(\"hr\", null), mdx(\"p\", null, \"Mui styling is powered by a CSS-in-JS solution available as\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/@material-ui/styles\"\n  }), \"@material-ui/styles\"), \" package, (built with JSS)\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Package\"), mdx(\"div\", {\n    style: {\n      padding: '2em',\n      paddingTop: 0,\n      fontSize: '2.5rem'\n    }\n  }, mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"@material-ui/styles\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"@material-ui/core/styles\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Isolated solution.\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Re-exports @material-ui/styles as @material-ui/core/styles. So, no need of installing @material-ui/styles if @material-ui/core is already installed.\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Doesn\\u2019t have a default theme.\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default Mui theme is applied to re-exported modules of @material-ui/styles.\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Used to style React apps that are not using Mui components.\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Used to style React apps that are using Mui components.\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })))))), mdx(\"hr\", null), mdx(\"h1\", null, \"Basic Styling\"), mdx(\"hr\", null), mdx(\"p\", null, \"Three ways to style\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Hook API (we use)\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import { makeStyles } from '@material-ui/core/styles';\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Styled Components API\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import { styled } from '@material-ui/core/styles';\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Higher-order component API\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import { withStyles } from '@material-ui/core/styles';\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Hook API - Basic Usage\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2[1:19,29:56],4:19,22,24[18:41] file=./samples/CustomButton.js\",\n    \"2[1:19,29:56],4:19,22,24[18:41]\": true,\n    \"file\": \"./samples/CustomButton.js\"\n  }), \"import React from 'react';\\nimport { makeStyles, Button } from '@material-ui/core';\\n\\nconst useCustomButtonStyles = makeStyles(\\n  {\\n    root: {\\n      background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\\n      border: 0,\\n      borderRadius: 3,\\n      boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\\n      color: 'white',\\n      height: 48,\\n      padding: '0 30px',\\n    },\\n  },\\n  {\\n    name: 'CustomButton',\\n  }\\n);\\n\\nconst CustomButton = (props) => {\\n  const classes = useCustomButtonStyles();\\n\\n  return <Button className={classes.root} {...props} />;\\n};\\n\\nexport default CustomButton;\\n\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"Basic usage:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a styles hook using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"makeStyles\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use the hook inside a component/another hook and bind it to className prop of the components/elements.\")))), mdx(Step, {\n    title: \"Hook API - Basic Usage\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4[31:42],19\",\n    \"4[31:42],19\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"makeStyles\"), \" is a function which takes in two arguments\"))), mdx(Step, {\n    title: \"Hook API - Basic Usage\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5:15\",\n    \"5:15\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"As first argument, we pass the styles we want to apply.\"), mdx(\"p\", null, \"Here we pass the styles as an object with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"root\"), \" as the style rule and the styles are assigned to it in the form of JS object.\"), mdx(\"p\", null, \"Note the CSS property names are written in camelCase instead of the usual kebab-case that CSS uses.\"))), mdx(Step, {\n    title: \"Hook API - Basic Usage\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"16:18\",\n    \"16:18\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"Second argument is an object with certain \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://v4.mui.com/styles/api/#arguments-3\"\n  }), \"options\"), \" available for customization.\"), mdx(\"p\", null, \"An important option that we make use of is:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"options.name\"), \" (String \", \"[optional]\", \"): The name of the style sheet. Useful for debugging.\"), mdx(\"div\", {\n    style: {\n      fontSize: '1.25rem'\n    }\n  }, mdx(\"p\", null, \"Inspect below buttons to check the class names generated by the styles.\")), mdx(CustomButtonWithoutStylesheetName, {\n    mdxType: \"CustomButtonWithoutStylesheetName\"\n  }, \"Without style sheet name\"), \" \", mdx(CustomButton, {\n    mdxType: \"CustomButton\"\n  }, \"With style sheet name\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Nesting Selectors\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Nesting Selectors\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"16:20 file=./samples/CustomButtonWithHover.js\",\n    \"16:20\": true,\n    \"file\": \"./samples/CustomButtonWithHover.js\"\n  }), \"import React from 'react';\\nimport { makeStyles, Button } from '@material-ui/core';\\n\\nconst useCustomButtonStyles = makeStyles(\\n  {\\n    root: {\\n      background: 'linear-gradient(45deg, Salmon 30%, IndianRed 90%)',\\n      border: 0,\\n      borderRadius: 3,\\n      boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\\n      color: 'white',\\n      height: 48,\\n      padding: '0 30px',\\n      boxSizing: 'border-box',\\n\\n      '&:hover': {\\n        background: 'linear-gradient(45deg, IndianRed 30%, Salmon 90%)',\\n        color: 'black',\\n        fontWeight: 'bold',\\n      },\\n\\n      '&:before, &:after, & *::before, & *::after': {\\n        boxSizing: 'border-box',\\n      },\\n\\n      '&.MuiButton-text': {\\n        textTransform: 'none',\\n      },\\n\\n      '& > span': {\\n        color: 'black',\\n      },\\n    },\\n  },\\n  {\\n    name: 'CustomButton',\\n  }\\n);\\n\\nconst CustomButton = (props) => {\\n  const classes = useCustomButtonStyles();\\n\\n  return <Button className={classes.root} {...props} />;\\n};\\n\\nexport default CustomButton;\\n\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"We can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&\"), \" to style any nested elements / pseudo elements / nested classes / pseudo classes.\"), mdx(CustomButtonWithHover, {\n    mdxType: \"CustomButtonWithHover\"\n  }, \"Hover me!\"))), mdx(Step, {\n    title: \"Nesting Selectors\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"16:32\",\n    \"16:32\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"We can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&\"), \" to style any nested elements / pseudo elements / nested classes / pseudo classes.\"), mdx(\"p\", null, \"Let's see how the style rules are generated for each of these nestings.\"), mdx(CustomButtonWithHover, {\n    mdxType: \"CustomButtonWithHover\"\n  }, \"Hover me!\"))), mdx(Step, {\n    title: \"Nesting Selectors\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"6,16\",\n    \"6,16\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"Style rule generated:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomButton-root:hover {}\")), mdx(CustomButtonWithHover, {\n    mdxType: \"CustomButtonWithHover\"\n  }, \"Hover me!\"))), mdx(Step, {\n    title: \"Nesting Selectors\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"6,22\",\n    \"6,22\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"Style rule generated:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomButton-root:before, CustomButton-root:after, CustomButton-root *::before, CustomButton-root *::after {}\")), mdx(CustomButtonWithHover, {\n    mdxType: \"CustomButtonWithHover\"\n  }, \"Hover me!\"))), mdx(Step, {\n    title: \"Nesting Selectors\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"6,26\",\n    \"6,26\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"Style rule generated:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomButton-root.MuiButton-text {}\")), mdx(CustomButtonWithHover, {\n    mdxType: \"CustomButtonWithHover\"\n  }, \"Hover me!\"))), mdx(Step, {\n    title: \"Nesting Selectors\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"6,30\",\n    \"6,30\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"Style rule generated:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomButton-root > span {}\")), mdx(\"p\", null, \"Basically the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&\"), \" is replaced by the class name generated for the style rule (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"root\"), \" in this case) wrapping these nestings.\"), mdx(CustomButtonWithHover, {\n    mdxType: \"CustomButtonWithHover\"\n  }, \"Hover me!\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Adapting based on props\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Adapting based on props\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"11,22[41:49] file=./samples/CustomButtonBasedOnProps.js\",\n    \"11,22[41:49]\": true,\n    \"file\": \"./samples/CustomButtonBasedOnProps.js\"\n  }), \"import React from 'react';\\nimport { makeStyles, Button } from '@material-ui/core';\\n\\nconst useCustomButtonStyles = makeStyles(\\n  {\\n    root: {\\n      background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\\n      border: 0,\\n      borderRadius: 3,\\n      boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\\n      color: ({ color }) => color ?? 'white',\\n      height: 48,\\n      padding: '0 30px',\\n    },\\n  },\\n  {\\n    name: 'CustomButton',\\n  }\\n);\\n\\nconst CustomButton = ({ color, ...props }) => {\\n  const classes = useCustomButtonStyles({ color });\\n\\n  return <Button className={classes.root} {...props} />;\\n};\\n\\nexport default CustomButton;\\n\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"We can pass a function instead of direct value to any CSS property. This function gets all the props passed to the hook call.\"), mdx(CustomButtonBasedOnProps, {\n    color: \"Brown\",\n    mdxType: \"CustomButtonBasedOnProps\"\n  }, \"My Text Color is Brown\"))), mdx(Step, {\n    title: \"Adapting based on props\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"6,7,10,11,14,22[41:49] file=./samples/CustomButtonBasedOnProps2.js\",\n    \"6,7,10,11,14,22[41:49]\": true,\n    \"file\": \"./samples/CustomButtonBasedOnProps2.js\"\n  }), \"import React from 'react';\\nimport { alpha, Button, darken, makeStyles } from '@material-ui/core';\\n\\nconst useCustomButtonStyles = makeStyles(\\n  {\\n    root: ({ color }) => ({\\n      background: `linear-gradient(45deg, #FE6B8B 30%, ${color} 90%)`,\\n      border: 0,\\n      borderRadius: 3,\\n      boxShadow: `0 3px 5px 2px ${alpha(color, 0.3)}`,\\n      color: darken(color, 0.6) ?? 'white',\\n      height: 48,\\n      padding: '0 30px',\\n    }),\\n  },\\n  {\\n    name: 'CustomButton',\\n  }\\n);\\n\\nconst CustomButton = ({ color, ...props }) => {\\n  const classes = useCustomButtonStyles({ color });\\n\\n  return <Button className={classes.root} {...props} />;\\n};\\n\\nexport default CustomButton;\\n\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"We can also pass the same function to any style rule.\"), mdx(\"p\", null, \"This is useful when there are multiple CSS properties in a style rule that depend on props passed.\"), mdx(CustomButtonBasedOnProps2, {\n    color: \"#A52A2A\",\n    mdxType: \"CustomButtonBasedOnProps2\"\n  }, \"My Text Color is darker shade of Brown (#A52A2A)\")))), mdx(\"hr\", null), mdx(\"p\", null, \"For a button we might want to add a disabled property based on which we have to style disabled state.\"), mdx(\"p\", null, \"How would we implement this?\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Adapting based on props\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"7:13,16:18,29[41:52] file=./samples/CustomButtonDisabled1.js\",\n    \"7:13,16:18,29[41:52]\": true,\n    \"file\": \"./samples/CustomButtonDisabled1.js\"\n  }), \"import React, { useState } from 'react';\\nimport { makeStyles, Button, lighten } from '@material-ui/core';\\n\\nconst useCustomButtonStyles = makeStyles(\\n  {\\n    root: {\\n      background: ({ disabled }) =>\\n        disabled\\n          ? `linear-gradient(45deg, ${lighten('#FE6B8B', 0.5)} 30%, ${lighten(\\n              '#FF8E53',\\n              0.5\\n            )} 90%)`\\n          : 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\\n      border: 0,\\n      borderRadius: 3,\\n      boxShadow: ({ disabled }) =>\\n        !disabled && '0 3px 5px 2px rgba(255, 105, 135, .3)',\\n      color: ({ disabled }) => (disabled ? 'grey' : 'white'),\\n      height: 48,\\n      padding: '0 30px',\\n    },\\n  },\\n  {\\n    name: 'CustomButton',\\n  }\\n);\\n\\nconst CustomButton = ({ disabled, ...props }) => {\\n  const classes = useCustomButtonStyles({ disabled });\\n\\n  return <Button className={classes.root} {...props} disabled={disabled} />;\\n};\\n\\nexport default CustomButton;\\n\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"One way is this.\"), mdx(DisabledDemo, {\n    mdxType: \"DisabledDemo\"\n  }), mdx(\"p\", null, \"If we inspect this, we will notice that Mui creates two classes starting with CustomButton-root. Removing one class will completely remove the background and color styling of the button. This is not good for debugging. Also readability of the code is compromised.\")))), mdx(\"hr\", null), mdx(\"p\", null, \"How can we improve the debugging experience and readability of the code?\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Adapting based on props\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"7,16:27 file=./samples/CustomButtonDisabled2.js\",\n    \"7,16:27\": true,\n    \"file\": \"./samples/CustomButtonDisabled2.js\"\n  }), \"import React from 'react';\\nimport { makeStyles, Button, lighten } from '@material-ui/core';\\nimport clsx from 'clsx';\\n\\nconst useCustomButtonStyles = makeStyles(\\n  {\\n    root: {\\n      background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\\n      border: 0,\\n      borderRadius: 3,\\n      boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\\n      color: 'white',\\n      height: 48,\\n      padding: '0 30px',\\n\\n      '&$disabled': {\\n        background: `linear-gradient(45deg, ${lighten(\\n          '#FE6B8B',\\n          0.5\\n        )} 30%, ${lighten('#FF8E53', 0.5)} 90%)`,\\n        boxShadow: 'none',\\n        color: 'grey',\\n        cursor: 'default',\\n        pointerEvents: 'none',\\n      },\\n    },\\n    disabled: {},\\n  },\\n  {\\n    name: 'CustomButton',\\n  }\\n);\\n\\nconst CustomButton = ({ disabled, ...props }) => {\\n  const classes = useCustomButtonStyles();\\n\\n  return (\\n    <Button\\n      className={clsx(classes.root, {\\n        [classes.disabled]: disabled,\\n      })}\\n      {...props}\\n    />\\n  );\\n};\\n\\nexport default CustomButton;\\n\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(DisabledDemo, {\n    betterImplementation: true,\n    mdxType: \"DisabledDemo\"\n  }), mdx(\"p\", null, \"We can use the nesting capability and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$\"), \" selection to define the disabled state...\"))), mdx(Step, {\n    title: \"Adapting based on props\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"39:41\",\n    \"39:41\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(DisabledDemo, {\n    betterImplementation: true,\n    mdxType: \"DisabledDemo\"\n  }), mdx(\"p\", null, \"...and use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clsx\"), \" library to apply the disabled class to the button conditionally along with root class.\"), mdx(\"p\", null, \"This generates class names: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomButton-root\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomButton-disabled\"), \" which can be toggled in dev tools to debug the styling.\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Overriding Styles using \", mdx(\"inlineCode\", {\n    parentName: \"h1\"\n  }, \"classes\"), \" prop\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Overriding Styles using `classes` prop\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2[22:30],6:10,21 file=./samples/OverridingWithClassesProp.js\",\n    \"2[22:30],6:10,21\": true,\n    \"file\": \"./samples/OverridingWithClassesProp.js\"\n  }), \"import React from 'react';\\nimport { makeStyles, TextField } from '@material-ui/core';\\n\\nconst useOverridingWithClassesPropStyles = makeStyles(\\n  () => ({\\n    customTextField: {\\n      '& .MuiInputLabel-root': {\\n        color: 'red',\\n      },\\n    },\\n  }),\\n  { name: 'OverridingWithClassesProp' }\\n);\\n\\nconst OverridingWithClassesProp = () => {\\n  const classes = useOverridingWithClassesPropStyles();\\n  return (\\n    <div>\\n      <TextField\\n        label=\\\"Custom Label Color\\\"\\n        classes={{ root: classes.customTextField }}\\n      />\\n    </div>\\n  );\\n};\\n\\nexport default OverridingWithClassesProp;\\n\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"All Mui components allow overriding styles using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"classes\"), \" prop.\"), mdx(OverridingWithClassesProp, {\n    mdxType: \"OverridingWithClassesProp\"\n  }))), mdx(Step, {\n    title: \"Overriding Styles using `classes` prop\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"45\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"45 file=./samples/OverridingWithClassesProp2.js\",\n    \"file\": \"./samples/OverridingWithClassesProp2.js\"\n  }), \"import { makeStyles, Typography } from '@material-ui/core';\\nimport React from 'react';\\n\\nconst useCustomTextFieldStyles = makeStyles(\\n  (theme) => ({\\n    root: {},\\n    label: {\\n      color: 'white',\\n    },\\n    input: {},\\n  }),\\n  { name: 'CustomTextField' }\\n);\\n\\nconst CustomTextField = (props) => {\\n  const classes = useCustomTextFieldStyles({ classes: props.classes });\\n\\n  const { classes: _, label, ...rest } = props;\\n  return (\\n    <div className={classes.root}>\\n      <Typography component=\\\"label\\\" variant=\\\"body2\\\" className={classes.label}>\\n        {label}\\n        {` `}\\n        <input type=\\\"text\\\" {...rest} className={classes.input} />\\n      </Typography>\\n    </div>\\n  );\\n};\\n\\nconst useOverridingWithClassesPropStyles = makeStyles(\\n  () => ({\\n    customLabel: {\\n      color: 'red',\\n    },\\n  }),\\n  { name: 'OverridingWithClassesProp' }\\n);\\n\\nconst OverridingWithClassesProp = () => {\\n  const classes = useOverridingWithClassesPropStyles();\\n  return (\\n    <div>\\n      <CustomTextField label=\\\"Normal Label Color\\\" />\\n      <CustomTextField\\n        classes={{ label: classes.customLabel, input: 'my-input' }}\\n        label=\\\"Custom Label Color\\\"\\n      />\\n    </div>\\n  );\\n};\\n\\nexport default OverridingWithClassesProp;\\n\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"We can also using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"classes\"), \" prop to override style rules of our custom components.\"), mdx(OverridingWithClassesProp2, {\n    mdxType: \"OverridingWithClassesProp2\"\n  }))), mdx(Step, {\n    title: \"Overriding Styles using `classes` prop\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"16\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"16\"\n  }), \"\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"We should pass along the classes prop to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useStyles\"), \" hook generated by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"makeStyles\"), \" for the overrides to get applied.\"), mdx(OverridingWithClassesProp2, {\n    mdxType: \"OverridingWithClassesProp2\"\n  })))), mdx(\"hr\", null), mdx(\"h1\", null, \"Theming\"), mdx(\"hr\", null), mdx(\"p\", null, \"The default theme provided by Mui when using style creation APIs from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@material-ui/core/styles\"), \" is as follows:\"), mdx(DefaultThemeDemo, {\n    mdxType: \"DefaultThemeDemo\"\n  }), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Theming\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2[18:28],6:16,27:31 file=./samples/CustomTheme.js\",\n    \"2[18:28],6:16,27:31\": true,\n    \"file\": \"./samples/CustomTheme.js\"\n  }), \"import React from 'react';\\nimport { Button, createTheme, ThemeProvider } from '@material-ui/core';\\n\\nconst defaultTheme = createTheme({});\\n\\nconst theme = createTheme(\\n  // These overrides are merged with default theme options to create the final theme\\n  {\\n    palette: {\\n      primary: {\\n        main: '#df8020',\\n        contrastText: 'hsl(0deg 0% 0%)',\\n      },\\n    },\\n  }\\n);\\n\\nconst CustomTheme = () => {\\n  return (\\n    <ThemeProvider theme={defaultTheme}>\\n      <Button color=\\\"primary\\\" variant=\\\"contained\\\">\\n        Default Theme Button\\n      </Button>\\n\\n      <br />\\n\\n      <ThemeProvider theme={theme}>\\n        <Button color=\\\"primary\\\" variant=\\\"contained\\\">\\n          Custom Theme Button\\n        </Button>\\n      </ThemeProvider>\\n    </ThemeProvider>\\n  );\\n};\\n\\nexport default CustomTheme;\\n\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"We can create a custom theme using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createTheme\"), \" function from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@material-ui/core/styles\"), \" and provide it to a React component tree using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeProvider\"), \".\"), mdx(CustomTheme, {\n    mdxType: \"CustomTheme\"\n  }))), mdx(Step, {\n    title: \"Theming\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4:16,20,27,31,32\",\n    \"4:16,20,27,31,32\": true\n  }), \"\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"It is also possible to nest \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeProvider\"), \"s if needed. We have to make sure there is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeProvider\"), \" at the root of the tree for the nesting to work.\"), mdx(CustomTheme, {\n    mdxType: \"CustomTheme\"\n  })))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Using the theme: in makeStyles\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5,7,8,10 file=./samples/UsingTheme.js\",\n    \"5,7,8,10\": true,\n    \"file\": \"./samples/UsingTheme.js\"\n  }), \"import React from 'react';\\nimport { Box, Typography, makeStyles, CssBaseline } from '@material-ui/core';\\n\\nconst useUsingThemeStyles = makeStyles(\\n  (theme) => ({\\n    root: {\\n      backgroundColor: theme.palette.primary.main,\\n      color: theme.palette.warning.main,\\n    },\\n  }),\\n  { name: 'UsingTheme' }\\n);\\n\\nconst UsingTheme = () => {\\n  const classes = useUsingThemeStyles();\\n  return (\\n    <Box p={[3, 7]} className={classes.root}>\\n      <p>\\n        <strong>Secondary Color Text</strong>\\n      </p>\\n    </Box>\\n  );\\n};\\n\\nexport default UsingTheme;\\n\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"makeStyles\"), \", in addition to accepting an object as a first parameter, it can also accept a function that returns an object. This function gets the theme passed to it.\"), mdx(UsingTheme, {\n    mdxType: \"UsingTheme\"\n  })))), mdx(\"hr\", null), mdx(\"h1\", null, \"Global Styling\"), mdx(\"hr\", null), mdx(\"p\", null, \"There are cases where we want to apply global styling to the entire application. For example, to modify the styles of a 3rd party library components other than Mui.\"), mdx(\"p\", null, \"Before going to global styling let's see what \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CssBaseline\"), \" is.\"), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CssBaseline\"), \" is a collection of HTML element and attribute style-normalizations that make browsers render all elements more consistently.\"), mdx(\"p\", null, \"It modifies the following (\", mdx(\"a\", {\n    href: \"https://v4.mui.com/components/css-baseline/#approach\",\n    target: \"_blank\"\n  }, \"more details\"), \"):\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<html>\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<body>\"), \" elements\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"box-sizing\"), \" of all elements\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"sets the default typography to the elements\")), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Theming\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"8:37 file=./samples/GlobalStyling.js\",\n    \"8:37\": true,\n    \"file\": \"./samples/GlobalStyling.js\"\n  }), \"import React from 'react';\\nimport {\\n  createTheme,\\n  CssBaseline,\\n  lighten,\\n  ThemeProvider,\\n} from '@material-ui/core';\\nimport DatePicker from 'react-widgets/DatePicker';\\nimport 'react-widgets/styles.css';\\n\\nconst defaultTheme = createTheme({});\\nconst theme = createTheme({\\n  overrides: {\\n    MuiCssBaseline: {\\n      '@global': {\\n        '.rw-widget': {\\n          ...defaultTheme.typography.body2,\\n        },\\n        '.rw-date-picker': {\\n          maxWidth: 300,\\n        },\\n        '.rw-state-focus .rw-widget-picker': {\\n          borderColor: defaultTheme.palette.primary.main,\\n          boxShadow: `0 0 0 3px ${lighten(\\n            defaultTheme.palette.primary.main,\\n            0.25\\n          )}`,\\n        },\\n        '.rw-cell.rw-state-selected': {\\n          backgroundColor: defaultTheme.palette.primary.main,\\n          borderColor: defaultTheme.palette.primary.main,\\n          color: defaultTheme.palette.primary.contrastText,\\n        },\\n      },\\n    },\\n  },\\n});\\n\\nconst GlobalStyling = () => {\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <CssBaseline />\\n      <DatePicker placeholder=\\\"m/dd/yy\\\" />\\n    </ThemeProvider>\\n  );\\n};\\n\\nexport default GlobalStyling;\\n\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"We can add global styles using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@global\"), \" selector by overriding MuiCssBaseline component while creating the theme.\"), mdx(GlobalStyling, {\n    mdxType: \"GlobalStyling\"\n  }))), mdx(Step, {\n    title: \"Theming\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"42\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"42\"\n  }), \"\")), mdx(\"div\", {\n    style: {\n      padding: '1em'\n    }\n  }, mdx(\"p\", null, \"Make sure to add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CssBaseline\"), \" in the root of the tree for the global styles to apply.\"), mdx(GlobalStyling, {\n    mdxType: \"GlobalStyling\"\n  })))), mdx(\"hr\", null), mdx(\"h2\", null, \"Can't use the generated class names of custom styles to style globally...\"), mdx(\"hr\", null), mdx(\"p\", null, \"...as the class names generated for our custom style rules have a number suffixed to them and keep changing on re-rendering of the application.\"), mdx(\"p\", null, \"For example, the class name generated for our CustomButton can be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomButton-root-1\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomButton-root-123\"), \", etc.\"), mdx(CustomButtonWithHover, {\n    mdxType: \"CustomButtonWithHover\"\n  }, \"My Button\"), mdx(\"p\", null, \"This means that we can't use the class names directly in our global css file as we don't know what the suffixed number would be.\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Thank You\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","id":"ac775e8d-2fea-59a7-ad82-25565278c856","slug":"/ui-meetup-mui-styling","title":"Mui Styling"}},"staticQueryHashes":[]}